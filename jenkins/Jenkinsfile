pipeline {
  agent any
  tools {
    maven "maven-3"
  }
  stages {
    stage ("Prepare Environment") {
      steps {
        script {
          env.PROJECT_GROUP_ID = "andylke"
          def mavenPom = readMavenPom()
          env.PROJECT_ARTIFACT_ID = mavenPom.getArtifactId()
          env.PROJECT_VERSION = mavenPom.getVersion()

          env.GIT_CREDENTIAL_ID = "github-credential"
          env.GIT_COMMITTER_NAME = "${env.BUILD_TAG}"
          env.GIT_COMMITTER_EMAIL = "${env.BUILD_URL}"
          env.GIT_AUTHOR_NAME_AND_EMAIL = "Jenkins <${env.JENKINS_URL}>"
          env.GIT_URL_SCHEME = "https://"
          env.GIT_URL_DOMAIN_AND_PATH = env.GIT_URL.minus(env.GIT_URL_SCHEME)
          def (remoteRepository, remoteBranch) = GIT_BRANCH.split("/")
          env.GIT_REMOTE_REPOSITORY = remoteRepository
          env.GIT_REMOTE_BRANCH = remoteBranch

          env.DOCKER_REGISTRY_URL = "https://registry.hub.docker.com"
          env.DOCKER_CREDENTIAL_ID = "docker-credential"
        }
      }
    }
    stage ("Increment Version") {
      steps {
        script {
          env.INCREMENT_VERSION = "${PROJECT_VERSION}".endsWith("-SNAPSHOT") ? "NO" : "YES"
          if (env.INCREMENT_VERSION == "YES") {
            def (majorVersion, minorVersion, patchVersion) = "${PROJECT_VERSION}".split("\\.")
            env.BUILD_VERSION = majorVersion + "." + minorVersion + "." + (patchVersion.toInteger() + 1)
          } else {
            env.BUILD_VERSION = env.PROJECT_VERSION
          }
        }
      }
    }
    stage ("Maven Set Version") {
      when {
        environment name: "INCREMENT_VERSION", value: "YES"
      }
      steps {
        script {
          sh("mvn versions:set -DnewVersion=${BUILD_VERSION}")

          sh("git add pom.xml")
          sh("git config user.name '${GIT_COMMITTER_NAME}'")
          sh("git config user.email '${GIT_COMMITTER_EMAIL}'")
          sh("git commit -m 'Update version to ${BUILD_VERSION}' --author '${GIT_AUTHOR_NAME_AND_EMAIL}'")
        }
      }
    }
    stage ("Maven Build") {
      steps {
        script {
          sh("mvn clean package")
        }
      }
    }
    stage ("Git Push") {
      when {
        environment name: "INCREMENT_VERSION", value: "YES"
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: GIT_CREDENTIAL_ID, passwordVariable: "GIT_PASSWORD")]){
            sh("git push ${GIT_URL_SCHEME}${GIT_USERNAME}@${GIT_URL_DOMAIN_AND_PATH}")
          }
        }
      }
    }
    stage("Docker Build") {
      steps {
        script {
          docker.build("${PROJECT_GROUP_ID}/${PROJECT_ARTIFACT_ID}:${BUILD_VERSION}",
              "--build-arg ARTIFACT_ID=${PROJECT_ARTIFACT_ID} --build-arg VERSION=${BUILD_VERSION} .")
        }
      }
    }
    stage("Docker Push") {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKER_CREDENTIAL_ID) {
              docker.image("${PROJECT_GROUP_ID}/${PROJECT_ARTIFACT_ID}:${BUILD_VERSION}").push()
              docker.image("${PROJECT_GROUP_ID}/${PROJECT_ARTIFACT_ID}:${BUILD_VERSION}").push("latest")
          }
        }
      }
    }
    stage("Docker Stop") {
      steps {
        script {
          try {
            sh("docker stop ${PROJECT_ARTIFACT_ID}")
            sh("docker rm ${PROJECT_ARTIFACT_ID}")
          } catch (err) {
              echo err.getMessage()
          }
        }
      }
    }
    stage("Docker Run"){
      steps {
        script {
          sh("docker run --name ${PROJECT_ARTIFACT_ID} -d -p 28080:8080 ${PROJECT_GROUP_ID}/${PROJECT_ARTIFACT_ID}:${BUILD_VERSION}")
        }
      }
    }
  }
}
