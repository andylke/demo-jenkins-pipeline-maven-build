pipeline {
  agent any
  tools {
    maven 'maven-3'
  }
  environment {
    BUILD_GROUP_ID = "andylke"
    BUILD_ARTIFACT_ID = readMavenPom().getArtifactId()
    BUILD_VERSION = readMavenPom().getVersion()

    SCM_URL = scm.getUserRemoteConfigs()[0].getUrl()
  }
  stages {
    stage ('Increment Patch Version') {
      when {
        expression {
          return BUILD_VERSION == ~"\d+.\d+.\d+"
        }
      }
      steps {
        echo "SCM_URL=${SCM_URL}"
      }
    }
    stage ('Maven Build') {
        steps {
          bat 'mvn clean package'
        }
    }
    stage('Docker Build') {
      steps {
        script {
          docker.build("${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}",
              "--build-arg BUILD_ARTIFACT_ID=${BUILD_ARTIFACT_ID} --build-arg BUILD_VERSION=${BUILD_VERSION} .")
        }
      }
    }
    stage('Docker Push') {
      steps {
        script {
          docker.withRegistry('https://registry.hub.docker.com', 'docker-credential') {
              docker.image("${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}").push()
              docker.image("${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}").push("latest")
          }
        }
      }
    }
    stage('Docker Stop') {
      steps {
        script {
          try {
            bat "docker stop ${BUILD_ARTIFACT_ID}"
            bat "docker rm ${BUILD_ARTIFACT_ID}"
          } catch (err) {
              echo err.getMessage()
          }
        }
      }
    }
    stage('Docker Run'){
      steps {
        bat "docker run --name ${BUILD_ARTIFACT_ID} -d -p 28080:8080 ${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}"
      }
    }
  }
}
