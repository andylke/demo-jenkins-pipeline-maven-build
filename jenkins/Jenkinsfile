pipeline {
  agent any
  tools {
    maven "maven-3"
  }
  environment {
    GIT_CREDENTIAL_ID = "github-credential"
    DOCKER_REGISTRY_URL = "https://registry.hub.docker.com"
    DOCKER_CREDENTIAL_ID = "docker-credential"

    BUILD_GROUP_ID = "andylke"
    BUILD_ARTIFACT_ID = readMavenPom().getArtifactId()
    BUILD_VERSION = readMavenPom().getVersion()
  }
  stages {
    stage ("Check Release Type") {
      steps {
        script {
          env.INCREMENT_VERSION = "${BUILD_VERSION}".endsWith("-SNAPSHOT") ? "NO" : "YES"
        }
      }
    }
    stage ("Increment Version") {
      when {
        environment name: "INCREMENT_VERSION", value: "YES"
      }
      steps {
        script {
          def (majorVersion, minorVersion, patchVersion) = "${BUILD_VERSION}".split("\\.")
          env.BUILD_VERSION = majorVersion + "." + minorVersion + "." + (patchVersion.toInteger() + 1)
        }
        bat "mvn versions:set -DnewVersion=${env.BUILD_VERSION}"
      }
    }
    stage ("Maven Build") {
        steps {
          bat "mvn clean package"
        }
    }
    stage ("Push Incremented Version") {
      when {
        environment name: "INCREMENT_VERSION", value: "YES"
      }
      steps {
        script {
          env.GIT_REPOSITORY_URL = scm.getUserRemoteConfigs()[0].getUrl().minus("https://")
          sh("git add pom.xml")
          sh("git commit -m 'Update version to ${BUILD_VERSION}'")
          withCredentials([usernamePassword(credentialsId: GIT_CREDENTIAL_ID, usernameVariable: "GIT_USERNAME", passwordVariable: "GIT_PASSWORD")]){
            sh("git push https://${GIT_USERNAME}:${GIT_USERNAME}@${GIT_REPOSITORY_URL}")
          }
        }
      }
    }
    stage("Docker Build") {
      steps {
        script {
          docker.build("${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}",
              "--build-arg BUILD_ARTIFACT_ID=${BUILD_ARTIFACT_ID} --build-arg BUILD_VERSION=${BUILD_VERSION} .")
        }
      }
    }
    stage("Docker Push") {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKER_CREDENTIAL_ID) {
              docker.image("${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}").push()
              docker.image("${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}").push("latest")
          }
        }
      }
    }
    stage("Docker Stop") {
      steps {
        script {
          try {
            bat "docker stop ${BUILD_ARTIFACT_ID}"
            bat "docker rm ${BUILD_ARTIFACT_ID}"
          } catch (err) {
              echo err.getMessage()
          }
        }
      }
    }
    stage("Docker Run"){
      steps {
        bat "docker run --name ${BUILD_ARTIFACT_ID} -d -p 28080:8080 ${BUILD_GROUP_ID}/${BUILD_ARTIFACT_ID}:${BUILD_VERSION}"
      }
    }
  }
}
